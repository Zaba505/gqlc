// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gqlc/compiler (interfaces: CodeGenerator)

// Package cmd is a generated GoMock package.
package cmd

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	ast "github.com/gqlc/graphql/ast"
	reflect "reflect"
)

// MockCodeGenerator is a mock of CodeGenerator interface
type MockCodeGenerator struct {
	ctrl     *gomock.Controller
	recorder *MockCodeGeneratorMockRecorder
}

// MockCodeGeneratorMockRecorder is the mock recorder for MockCodeGenerator
type MockCodeGeneratorMockRecorder struct {
	mock *MockCodeGenerator
}

// NewMockCodeGenerator creates a new mock instance
func NewMockCodeGenerator(ctrl *gomock.Controller) *MockCodeGenerator {
	mock := &MockCodeGenerator{ctrl: ctrl}
	mock.recorder = &MockCodeGeneratorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCodeGenerator) EXPECT() *MockCodeGeneratorMockRecorder {
	return m.recorder
}

// Generate mocks base method
func (m *MockCodeGenerator) Generate(arg0 context.Context, arg1 *ast.Document, arg2 string) error {
	ret := m.ctrl.Call(m, "Generate", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Generate indicates an expected call of Generate
func (mr *MockCodeGeneratorMockRecorder) Generate(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockCodeGenerator)(nil).Generate), arg0, arg1, arg2)
}

// GenerateAll mocks base method
func (m *MockCodeGenerator) GenerateAll(arg0 context.Context, arg1 []*ast.Document, arg2 string) error {
	ret := m.ctrl.Call(m, "GenerateAll", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GenerateAll indicates an expected call of GenerateAll
func (mr *MockCodeGeneratorMockRecorder) GenerateAll(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateAll", reflect.TypeOf((*MockCodeGenerator)(nil).GenerateAll), arg0, arg1, arg2)
}
